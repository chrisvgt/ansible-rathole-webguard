---
# --- Crowdsec Setup ---
crowdsec_api_key: "{{ vault_crowdsec_api_key }}" # Generate with: `head /dev/urandom | tr -dc A-Za-z0-9 | head -c 32`
crowdsec_enrollment_key: "{{ vault_crowdsec_enrollment_key }}" # Connect Crowdsec Security Engine to console
duration_expr: true # Enable dynamic increase of blocking time

dynamic_whitelist_enabled: false # Enable whitelist (resolved via DDNS)
dynamic_ddns_hostnames:
  - "ddns.example.com"

# --- Ntfy Setup ---
ntfy_enabled: false # Set to `true` to enable ntfy notifications
ntfy_server: "ntfy.sh"
ntfy_topic: "crowdsec_alerts"
ntfy_auth_token: "" # Optional: Your ntfy authentication token

# --- Cloudflare Setup ---
cloudflare_api_token: "{{ vault_cloudflare_api_token_server }}" # Global API token for Cloudflare, useful for multiple domains on this server

# --- Caddy Configuration Examples (for multiple domains on this server) ---
caddy_sites:
  - name: blog # Used for default log file name
    domain: "blog.yourdomain.com"
    local_port: 2368
    # Optional: Customize log settings per site
    # log_file: "/var/log/caddy/blog.access.log"
    # log_roll_size: "20mb"
    # log_roll_keep: 15
    # log_roll_keep_for: "48h"

  - name: notify
    domain: "notify.yourdomain.com"
    local_port: 8004
    # Optional: Special regex for ntfy HTTP redirect logic
    # ntfy_path_regexp: "^/([-_a-z0-9]{0,64}$|docs/|static/)"

  - name: stream
    domain: "stream.yourdomain.com"
    local_port: 8096
    # Optional: Enable forwarding for specific paths
    # enable_forward: true
    # forward_ip: 192.168.0.1
    # forward_path: "/path/to/"

# --- Rathole Server Configuration Example ---
rathole_role: "server" # Identifies this as a Rathole server configuration
rathole_server_config: # Top-level server settings
  listen_addr: "{{ hostvars['server.example']['ansible_host'] }}:2333" # Address Rathole server listens on for clients
  default_token: "default_token_for_all_services_if_not_specified" # Optional: Default token for all services
  heartbeat_interval: 30 # Optional: Heartbeat interval in seconds (0 to disable)

  # --- Transport Configuration (Choose ONE type) ---
  transport:
    type: "noise" # Selected transport type: Noise for secure, lightweight encryption.

    # Noise Transport: Secure and lightweight encryption
    # Requires 'local_private_key' and 'remote_public_key' for key exchange
    noise:
      pattern: "Noise_NK_25519_ChaChaPoly_BLAKE2s" # Optional: Default is "Noise_NK_25519_ChaChaPoly_BLAKE2s"
      local_private_key: "your_server_private_key_base64" # Optional: Base64 encoded private key for server
      remote_public_key: "your_client_public_key_base64" # Optional: Base64 encoded public key of client

    # TCP Transport
    tcp:
      nodelay: true
      keepalive_secs: 20
      keepalive_interval: 8

    # TLS Transport
    tls:
      pkcs12: "/path/to/identify.pfx"
      pkcs12_password: "your_pkcs12_password"

    # WebSocket Transport
    websocket:
      tls: true # If true, uses settings from `server.transport.tls`

  # --- Service Definitions ---
  services:
    - name: "service1" # Unique service name (must match client side)
      type: "tcp" # Optional: Default is tcp. Can be "tcp", "udp", "socks5".
      token: "specific_token_for_service1" # Optional: Overrides `default_token`.
      bind_addr: "0.0.0.0:8081" # Address this service is exposed at.
      nodelay: true # Optional

    - name: "service2"
      bind_addr: "0.0.0.1:8082"

      # Add other service-specific options here
