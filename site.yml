- name: ansible-rathole-webguard
  hosts: webservers
  become: true # All tasks in this play will run with root privileges

  pre_tasks:
    - name: Ensure this playbook is only executed on Debian-based systems
      ansible.builtin.assert:
        that:
          - ansible_os_family == "Debian"
        fail_msg: "This playbook can only be executed on Debian-based systems (e.g., Ubuntu, Debian)."
        success_msg: "System is Debian-based. Proceeding with the playbook."

    - name: Ensure APT cache is updated and perform a dist-upgrade (Debian-based systems)
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600
        upgrade: dist
        autoremove: true
      when: ansible_os_family == "Debian"

    - name: Install common system utilities (Debian-based systems)
      ansible.builtin.apt:
        name:
          - build-essential # For compiling software (e.g., Go/Caddy)
          - curl          # For downloading files
          - unzip         # For extracting archives
          - git           # For version control and cloning repositories
          - vim           # A popular text editor
          - htop          # An interactive process viewer
        state: present
      when: ansible_os_family == "Debian"

    - name: Ensure /usr/local/bin exists
      ansible.builtin.file:
        path: /usr/local/bin
        state: directory
        mode: '0755' # Standard permissions for executable binaries

  roles:
    # The 'go_lang' and 'xcaddy' roles are prerequisites for building Caddy.
    # They are only included if the host is configured as a Rathole 'server'
    # because server mode typically involves Caddy as a reverse proxy.
    - role: go_lang
      when: rathole_role == "server"
    - role: xcaddy
      when: rathole_role == "server"

    # The 'caddy' role is applied only when this host is designated as a Rathole 'server'.
    # Caddy acts as the web server and reverse proxy in the server setup.
    - role: caddy
      when: rathole_role == "server"

    # The 'crowdsec' role provides security and is optional.
    # It's included only if the host is a Rathole 'server' AND 'enable_crowdsec' is true.
    - role: crowdsec
      when: rathole_role == "server" and enable_crowdsec

    # The 'rathole' role is always applied. Its internal tasks will
    # conditionally configure it as a 'server' or 'client' based on the
    # 'rathole_role' variable defined for the host.
    - role: rathole

  post_tasks:
    - name: Check if reboot is required after package upgrades
      ansible.builtin.stat:
        path: /var/run/reboot-required
      register: reboot_required_file
      when: ansible_os_family == "Debian" # Only run on Debian-based systems

    - name: Reboot host if required
      ansible.builtin.reboot:
        msg: "System rebooting due to package upgrades."
        pre_reboot_delay: 5 # Wait 5 seconds before initiating reboot
        post_reboot_delay: 10 # Wait 10 seconds after reboot before re-establishing connection
        connect_timeout: 300 # Max time to wait for connection to come back
      when:
        - ansible_os_family == "Debian"
        - reboot_required_file.stat.exists # Only reboot if /var/run/reboot-required file exists

    - name: Wait for host to reboot
      ansible.builtin.wait_for_connection: # ICMP must work properly
        delay: 10
        timeout: 300 # Wait up to 5 minutes
      when:
        - ansible_os_family == "Debian"
        - reboot_required_file.stat.exists # Only wait if a reboot was actually needed

    - name: Clean up rebooted sentinel file
      ansible.builtin.file:
        path: /tmp/rebooted
        state: absent
      when:
        - ansible_os_family == "Debian"
        - reboot_required_file.stat.exists # Only remove if it might have been created

    # Clean up global temporary files
    - name: Clean up global temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      with_items:
        - "/tmp/ansible_temp"
        - "/tmp/unused_files"