# roles/rathole/tasks/main.yml

- name: Ensure Rathole system group exists
  ansible.builtin.group:
    name: "{{ rathole_group }}"
    state: present
  when: rathole_group not in ansible_facts['group_names']

- name: Ensure Rathole system user exists
  ansible.builtin.user:
    name: "{{ rathole_user }}"
    group: "{{ rathole_group }}"
    create_home: no
    shell: "/usr/sbin/nologin"
    state: present
  when: rathole_user not in ansible_facts['users']

- name: Check existing Rathole version
  ansible.builtin.command: "{{ rathole_install_path }}/{{ rathole_binary_name }} --version"
  register: rathole_version_check
  failed_when: false
  changed_when: false
  ignore_errors: true

- name: Set Rathole download URL based on architecture
  ansible.builtin.set_fact:
    rathole_download_url: "{{ rathole_download_url_base }}/{{ rathole_binary_name }}-{{ ansible_system | lower }}-{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"
  # This task dynamically sets the download URL for different architectures.
  # For example, if ansible_architecture is 'aarch64', it will build URL for 'linux-aarch64'.

- name: Download Rathole binary
  ansible.builtin.get_url:
    url: "{{ rathole_download_url }}"
    dest: "/tmp/{{ rathole_binary_name }}"
    mode: '0755' # Make executable
  register: rathole_download_result
  until: rathole_download_result is succeeded
  retries: 5
  delay: 2 # Retry download up to 5 times with a 2-second delay
  when: "'{{ rathole_version }}' not in rathole_version_check.stdout"

- name: Move Rathole binary to /usr/local/bin
  ansible.builtin.copy:
    src: "/tmp/{{ rathole_binary_name }}"
    dest: "{{ rathole_install_path }}/{{ rathole_binary_name }}"
    owner: root
    group: root
    mode: '0755'
    remote_src: yes # Source is on the remote host (downloaded to /tmp)
  when: "'{{ rathole_version }}' not in rathole_version_check.stdout"

- name: Create Rathole configuration directory
  ansible.builtin.file:
    path: "{{ rathole_config_path }}"
    state: directory
    owner: "{{ rathole_user }}"
    group: "{{ rathole_group }}"
    mode: '0755'
  when: not (ansible_facts['files'][rathole_config_path] is defined and ansible_facts['files'][rathole_config_path]['isdir'])

- name: Create or update Rathole configuration file
  ansible.builtin.template:
    src: "templates/rathole.toml.j2"
    dest: "{{ rathole_config_path }}/{{ rathole_config_file }}"
    owner: "{{ rathole_user }}"
    group: "{{ rathole_group }}"
    mode: '0644'
  notify: Restart Rathole Service
  register: rathole_config_changed

- name: Create Systemd unit file for Rathole
  ansible.builtin.template:
    src: "templates/rathole.service.j2"
    dest: "/etc/systemd/system/rathole.service"
    owner: root
    group: root
    mode: '0644'
  notify: Restart Rathole Service
  register: rathole_service_changed

- name: Reload Systemd daemon
  ansible.builtin.systemd:
    daemon_reload: yes
  when: rathole_service_changed.changed

- name: Enable and start Rathole service
  ansible.builtin.systemd:
    name: rathole
    enabled: yes
    state: started
  when: rathole_config_changed.changed or rathole_service_changed.changed