# roles/caddy/tasks/main.yml

- name: Install Caddy build dependencies
  ansible.builtin.apt:
    name:
      - git
      - build-essential
      - apt-transport-https
      - curl
    state: present
    update_cache: true

- name: Create Caddy system group
  ansible.builtin.group:
    name: "{{ caddy_group }}"
    state: present
    system: true

- name: Create Caddy system user
  ansible.builtin.user:
    name: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    system: true
    shell: "/usr/sbin/nologin"
    create_home: false # Caddy's HOME is set via systemd environment variable
    state: present

- name: Ensure Caddy directories exist with correct ownership and permissions
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse | default(false) }}" # Apply recursively for data directory
  loop:
    - path: "{{ caddy_config_dir }}"
      mode: "0755"
    - path: "{{ caddy_data_dir }}"
      mode: "0775"
      recurse: true # Writable for autosave.json
    - path: "{{ caddy_data_dir }}/caddy"
      mode: "0775" # Subdirectory for autosave etc.
    - path: "{{ caddy_log_dir }}"
      mode: "0755"

- name: Check installed Caddy version
  ansible.builtin.command:
    cmd: "{{ caddy_install_path }} version"
  register: caddy_version_check
  failed_when: false # Don't fail if the binary doesn't exist
  changed_when: false

- name: Build final Caddy plugin list
  ansible.builtin.set_fact:
    caddy_plugins_effective: >-
      {{ (caddy_plugins | default([]))
         + (enable_cloudflare | default(false) | ternary(['github.com/caddy-dns/cloudflare'], []))
         + (enable_crowdsec | default(false) | ternary([
              'github.com/hslatman/caddy-crowdsec-bouncer/http',
              'github.com/hslatman/caddy-crowdsec-bouncer/layer4',
              'github.com/hslatman/caddy-crowdsec-bouncer/appsec'
            ], [])) }}

- name: Compute hash of effective Caddy plugins
  ansible.builtin.set_fact:
    caddy_plugins_hash: "{{ caddy_plugins_effective | to_nice_json | hash('sha1') }}"

- name: Read previous Caddy plugins hash (if any)
  ansible.builtin.slurp:
    src: "{{ caddy_plugins_hash_file }}"
  register: caddy_plugins_hash_prev
  failed_when: false
  changed_when: false

- name: Build Caddy with specified plugins using xcaddy
  ansible.builtin.command:
    cmd: >-
      /usr/local/bin/xcaddy build v{{ caddy_version }}
      --output {{ caddy_install_path }}
      {% for plugin in caddy_plugins_effective %} --with {{ plugin }}{% endfor %}
  environment:
    # Use Go binary path from go_lang role if available, otherwise default to /usr/local/go/bin
    PATH: "{{ (go_lang_install_path | default('/usr/local')) ~ '/go/bin' }}:{{ ansible_env.PATH }}"
    GOPATH: "/root/go"
  notify: Restart Caddy Service
  changed_when: true
  when: >-
    ((caddy_version_check.stdout | default('') | regex_search('v([0-9.]+)', '\\1') | default(''))
    != (caddy_version | string))
    or
    ((caddy_plugins_hash_prev.content | default('') | b64decode | trim) != caddy_plugins_hash)

- name: Set Caddy binary permissions
  ansible.builtin.file:
    path: "{{ caddy_install_path }}"
    mode: "0755"
    owner: root
    group: root

- name: Persist current Caddy plugins hash
  ansible.builtin.copy:
    content: "{{ caddy_plugins_hash }}\n"
    dest: "{{ caddy_plugins_hash_file }}"
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: "0644"
  when: caddy_plugins_hash is defined

- name: Create Caddyfile from template
  ansible.builtin.template:
    src: "templates/Caddyfile.j2"
    dest: "{{ caddy_config_file }}"
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: "0644"
  notify: Restart Caddy Service

- name: Format Caddyfile for readability
  ansible.builtin.command:
    cmd: "{{ caddy_install_path }} fmt --overwrite {{ caddy_config_file }}"
  environment:
    ANSIBLE_REMOTE_TEMP: "/tmp"
  changed_when: false
  notify: Restart Caddy Service

- name: Create Caddy Systemd unit file
  ansible.builtin.template:
    src: "templates/caddy.service.j2"
    dest: "/etc/systemd/system/caddy.service"
    owner: root
    group: root
    mode: "0644"
  become: true
  notify: Restart Caddy Service

- name: Reload Systemd daemon to pick up new unit file
  ansible.builtin.systemd:
    daemon_reload: true
  become: true

- name: Enable and start Caddy service
  ansible.builtin.systemd:
    name: caddy
    enabled: true
    state: started
  become: true

- name: Clean up temporary Caddy build files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/tmp/caddy_build"
    - "/tmp/caddy_plugins"
  changed_when: false
