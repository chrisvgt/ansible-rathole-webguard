# roles/caddy/tasks/main.yml

- name: Install Caddy build dependencies
  ansible.builtin.apt:
    name:
      - git
      - build-essential
      - apt-transport-https
      - curl
    state: present

- name: Create Caddy system group
  ansible.builtin.group:
    name: "{{ caddy_group }}"
    state: present
    system: true

- name: Create Caddy system user
  ansible.builtin.user:
    name: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    system: true
    shell: "/usr/sbin/nologin"
    create_home: false # Caddy's HOME is set via systemd environment variable
    state: present

- name: Ensure Caddy directories exist with correct ownership and permissions
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: "{{ item.mode }}"
    recurse: "{{ item.recurse | default(false) }}" # Apply recursively for data directory
  loop:
    - { path: "{{ caddy_config_dir }}", mode: '0755' }
    - { path: "{{ caddy_data_dir }}", mode: '0775', recurse: true } # Writable for autosave.json
    - { path: "{{ caddy_data_dir }}/caddy", mode: '0775' } # Subdirectory for autosave etc.
    - { path: "{{ caddy_log_dir }}", mode: '0755' }

- name: Build Caddy with specified plugins using xcaddy
  ansible.builtin.command:
    cmd: /usr/local/bin/xcaddy build v{{ caddy_version }} --output {{ caddy_install_path }} {% if caddy_plugins | length > 0 and caddy_plugins[0] != '' %}{% for plugin in caddy_plugins %} --with {{ plugin }}{% endfor %}{% endif %}
    creates: "{{ caddy_install_path }}"
  environment:
    PATH: "{{ go_binary_path }}:{{ ansible_env.PATH }}"
    GOPATH: "/root/go"
  notify: Restart Caddy Service

- name: Set Caddy binary permissions
  ansible.builtin.file:
    path: "{{ caddy_install_path }}"
    mode: '0755'
    owner: root
    group: root

- name: Create Caddyfile from template
  ansible.builtin.template:
    src: "templates/Caddyfile.j2"
    dest: "{{ caddy_config_file }}"
    owner: "{{ caddy_user }}"
    group: "{{ caddy_group }}"
    mode: '0644'
  notify: Restart Caddy Service

- name: Format Caddyfile for readability
  ansible.builtin.command:
    cmd: "{{ caddy_install_path }} fmt --overwrite {{ caddy_config_file }}"
  become: true
  environment:
    ANSIBLE_REMOTE_TEMP: "/tmp"
  changed_when: true # Always report as changed for consistency
  notify: Restart Caddy Service

- name: Create Caddy Systemd unit file
  ansible.builtin.template:
    src: "templates/caddy.service.j2"
    dest: "/etc/systemd/system/caddy.service"
    owner: root
    group: root
    mode: '0644'
  become: true
  notify: Restart Caddy Service

- name: Reload Systemd daemon to pick up new unit file
  block:
    - ansible.builtin.systemd:
        daemon_reload: true
      become: true
- name: Enable and start Caddy service
  block:
    - ansible.builtin.systemd:
        name: caddy
        enabled: true
        state: started
      become: true
  become: true