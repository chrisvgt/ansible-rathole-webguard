# roles/crowdsec/tasks/main.yml

# --- CrowdSec Role: Installation and Configuration ---

- name: Skip CrowdSec role if disabled
  ansible.builtin.meta: end_play
  when: not enable_crowdsec | default(true) # Role skipped if `enable_crowdsec` is false (defaults to true).

## Repository and Package Installation

- name: Ensure curl is installed
  ansible.builtin.apt:
    name: curl
    state: present
    update_cache: yes
  become: yes
  # Installs `curl`, required for adding the CrowdSec repository.

- name: Add CrowdSec APT repository via script
  ansible.builtin.shell:
    cmd: curl -s https://install.crowdsec.net | sudo sh
    creates: /etc/apt/sources.list.d/crowdsec_crowdsec.list # Idempotent: runs only if repo file doesn't exist.
  args:
    executable: /bin/bash
  become: yes

- name: Update APT cache
  ansible.builtin.apt:
    update_cache: yes
  become: yes

- name: Create CrowdSec data directory
  ansible.builtin.file:
    path: /var/lib/crowdsec
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: yes

- name: Install CrowdSec agent and iptables bouncer
  ansible.builtin.apt:
    name:
      - crowdsec
      - crowdsec-firewall-bouncer-iptables
    state: present
  become: yes
  notify: Restart Crowdsec Service

## Post-Installation and Service Management

- name: Ensure CrowdSec service is enabled and started
  ansible.builtin.systemd:
    name: crowdsec
    state: started
    enabled: yes
    daemon_reload: yes # Reloads systemd units if Caddy's service file changed.
  become: yes

- name: Wait for CrowdSec Local API to be ready
  ansible.builtin.wait_for:
    port: "{{ crowdsec_lapi_port }}"
    host: "{{ crowdsec_lapi_ip }}"
    timeout: 60
    delay: 5
  delegate_to: localhost
  become: false
  when: inventory_hostname == 'prod_web_server' # Adjust this condition as needed for your specific host.

## CrowdSec Hub Content Installation

- name: Update CrowdSec Hub
  ansible.builtin.command: cscli hub update
  register: cscli_hub_update_output
  changed_when: "'Nothing to do' not in cscli_hub_update_output.stdout"
  failed_when: cscli_hub_update_output.rc != 0
  become: yes

- name: Install CrowdSecurity base HTTP scenarios
  ansible.builtin.command: cscli collections install crowdsecurity/base-http-scenarios
  register: cscli_base_http_scenarios_output
  changed_when: "'Successfully installed' in cscli_base_http_scenarios_output.stdout or 'Upgraded' in cscli_base_http_scenarios_output.stdout"
  failed_when: "(cscli_base_http_scenarios_output.rc != 0 and 'already installed' not in cscli_base_http_scenarios_output.stderr and 'already enabled' not in cscli_base_http_scenarios_output.stdout)"
  become: yes

- name: Install Caddy logs parser
  ansible.builtin.command: cscli parsers install crowdsecurity/caddy-logs
  register: cscli_caddy_logs_output
  changed_when: "'Successfully installed' in cscli_caddy_logs_output.stdout or 'Upgraded' in cscli_caddy_logs_output.stdout"
  failed_when: "(cscli_caddy_logs_output.rc != 0 and 'already installed' not in cscli_caddy_logs_output.stderr and 'already enabled' not in cscli_caddy_logs_output.stdout)"
  become: yes

- name: Install generic HTTP logs parser (optional)
  ansible.builtin.command: cscli parsers install crowdsecurity/http-logs
  register: cscli_http_logs_output
  changed_when: "'Successfully installed' in cscli_http_logs_output.stdout or 'Upgraded' in cscli_http_logs_output.stdout"
  failed_when: "(cscli_http_logs_output.rc != 0 and 'already installed' not in cscli_http_logs_output.stderr and 'already enabled' not in cscli_http_logs_output.stdout)"
  become: yes

## CrowdSec AppSec Setup

- name: Install CrowdSec AppSec virtual patching collection
  ansible.builtin.command: cscli collections install crowdsecurity/appsec-virtual-patching
  register: cscli_appsec_virtual_patching_output
  changed_when: "'Successfully installed' in cscli_appsec_virtual_patching_output.stdout or 'Upgraded' in cscli_appsec_virtual_patching_output.stdout"
  failed_when: "(cscli_appsec_virtual_patching_output.rc != 0 and 'already installed' not in cscli_appsec_virtual_patching_output.stderr and 'already enabled' not in cscli_appsec_virtual_patching_output.stdout)"
  become: yes

- name: Install CrowdSec AppSec generic rules collection
  ansible.builtin.command: cscli collections install crowdsecurity/appsec-generic-rules
  register: cscli_appsec_generic_rules_output
  changed_when: "'Successfully installed' in cscli_appsec_generic_rules_output.stdout or 'Upgraded' in cscli_appsec_generic_rules_output.stdout"
  failed_when: "(cscli_appsec_generic_rules_output.rc != 0 and 'already installed' not in cscli_appsec_generic_rules_output.stderr and 'already enabled' not in cscli_appsec_generic_rules_output.stdout)"
  become: yes

- name: Install CrowdSec AppSec HTTP CVE collection
  ansible.builtin.command: cscli collections install crowdsecurity/http-cve
  register: cscli_appsec_http_cve_output
  changed_when: "'Successfully installed' in cscli_appsec_http_cve_output.stdout or 'Upgraded' in cscli_appsec_http_cve_output.stdout"
  failed_when: "(cscli_appsec_http_cve_output.rc != 0 and 'already installed' not in cscli_appsec_http_cve_output.stderr and 'already enabled' not in cscli_appsec_http_cve_output.stdout)"
  become: yes

- name: Configure CrowdSec to listen for AppSec requests
  ansible.builtin.template:
    src: appsec.yaml.j2
    dest: /etc/crowdsec/acquis.d/appsec.yaml
    owner: root
    group: root
    mode: '0644'
  notify: Restart Crowdsec Service

## CrowdSec Console and Bouncer Management

- name: Check CrowdSec Console enrollment status
  ansible.builtin.command: cscli console status -o json
  register: cscli_console_status
  changed_when: false
  failed_when: false
  become: yes

- name: Enroll CrowdSec engine with the Console
  ansible.builtin.command: "cscli console enroll --enable context {{ crowdsec_enrollment_key }}"
  register: console_enroll_output
  changed_when: "'Successfully enrolled with the Console' in console_enroll_output.stdout"
  failed_when: "console_enroll_output.rc != 0 and 'already enrolled' not in console_enroll_output.stderr and 'You are already enrolled' not in console_enroll_output.stdout"
  become: yes
  when:
    - enable_crowdsec | default(true)
    - crowdsec_enrollment_key is defined and crowdsec_enrollment_key | length > 0
    - cscli_console_status.rc == 0
    - (cscli_console_status.stdout | from_json).get('status', '') != 'ENROLLED'

- name: Check if Caddy bouncer is already registered
  ansible.builtin.command: cscli bouncers list -o json
  register: cscli_bouncers_list
  changed_when: false
  failed_when: false
  become: yes

- name: Register Caddy bouncer with CrowdSec Local API
  ansible.builtin.command: "cscli bouncers add caddy-bouncer -k {{ crowdsec_api_key }}"
  when:
    - enable_crowdsec | default(true)
    - "'caddy-bouncer' not in cscli_bouncers_list.stdout"
    - cscli_bouncers_list.rc == 0
  register: bouncer_registration_output
  changed_when: bouncer_registration_output.rc == 0
  failed_when: bouncer_registration_output.rc != 0 and 'already exists' not in bouncer_registration_output.stderr
  become: yes

- name: Configure CrowdSec to monitor Caddy access logs
  ansible.builtin.copy:
    content: |
      # Use 'filenames' (plural) to specify multiple files or a glob pattern
      filenames:
        - "{{ caddy_log_dir }}/*.access.log"
      labels:
        type: caddy
    dest: /etc/crowdsec/acquis.d/caddy_logs.yaml
    owner: root
    group: root
    mode: '0644'
  become: yes
  notify: Restart Crowdsec Service

## CrowdSec Ntfy and Profile Configuration

- name: Ensure CrowdSec notifications directory exists (if Ntfy enabled)
  ansible.builtin.file:
    path: /etc/crowdsec/notifications/
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: ntfy_enabled

- name: Create Ntfy notification configuration file
  ansible.builtin.template:
    src: "templates/ntfy.yaml.j2"
    dest: /etc/crowdsec/notifications/ntfy.yaml
    owner: root
    group: root
    mode: "0644"
  notify: Restart Crowdsec Service
  when: ntfy_enabled

- name: Install GeoIP enrichment parser (if Ntfy enabled)
  ansible.builtin.command:
    cmd: cscli hub install crowdsecurity/geoip-enrich
  register: geoip_install_output
  changed_when: "'already installed' not in geoip_install_output.stdout"
  notify: Restart Crowdsec Service
  when: ntfy_enabled

- name: Create/update CrowdSec profiles.yaml for Ntfy or dynamic blocking
  ansible.builtin.template:
    src: "templates/profiles.yaml.j2"
    dest: /etc/crowdsec/profiles.yaml
    owner: root
    group: root
    mode: "0644"
  notify: Restart Crowdsec Service
  when: ntfy_enabled or duration_expr