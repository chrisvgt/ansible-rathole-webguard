---
# roles/crowdsec/tasks/main.yml

# Conditional skip for the entire role if enable_crowdsec is false
- name: Skip CrowdSec role if disabled in group_vars/all.yml
  ansible.builtin.meta: end_play
  when: not enable_crowdsec | default(true)

## Repository Installation Steps (Replaced with direct script execution)

- name: Ensure curl is installed for repository setup script
  ansible.builtin.apt:
    name: curl
    state: present
    update_cache: yes
  become: yes

- name: Install CrowdSec repositories via official script
  ansible.builtin.shell:
    cmd: curl -s https://install.crowdsec.net | sudo sh
    creates: /etc/apt/sources.list.d/crowdsec_crowdsec.list # Use a marker file to ensure idempotency
  args:
    # Ensure sudo is handled by Ansible's become, not by the script itself
    # This might require careful handling if the script *requires* internal sudo.
    # However, for simple pipe-to-sh, ansible's 'become' is usually sufficient.
    executable: /bin/bash # Ensure a shell is used for the pipe
  become: yes
  # Note: The 'creates' argument helps with idempotency.
  # If the file /etc/apt/sources.list.d/crowdsec_crowdsec.list already exists,
  # Ansible will assume the task has already done its job and skip it.
  # This makes it more idempotent for *subsequent* runs.

- name: Run apt update after repository installation (if not done by script)
  ansible.builtin.apt:
    update_cache: yes
  become: yes
  # The install script usually runs apt update, but this ensures it.

- name: Create CrowdSec data directory '/var/lib/crowdsec'
  ansible.builtin.file:
    path: /var/lib/crowdsec
    state: directory
    owner: root # Set to root initially, package post-install can adjust if needed
    group: root
    mode: '0755'
  become: yes

- name: Install CrowdSec and firewall bouncer packages
  ansible.builtin.apt:
    name:
      - crowdsec
      - crowdsec-firewall-bouncer-iptables # Installs the bouncer that interacts with firewall
    state: present
  become: yes
  notify: restart crowdsec # Notify handler to restart/start CrowdSec if newly installed or updated

## Post-Installation Configuration

- name: Ensure CrowdSec service is enabled and started
  ansible.builtin.systemd:
    name: crowdsec
    state: started
    enabled: yes
    daemon_reload: yes # Ensures systemd reloads if service unit files changed
  become: yes

- name: Wait for CrowdSec Local API to be ready
  ansible.builtin.wait_for:
    port: 8080 # Default CrowdSec Local API port
    host: 127.0.0.1
    timeout: 60 # Wait up to 60 seconds
    delay: 5 # Check every 5 seconds
  delegate_to: localhost # Run this check from the Ansible control node
  become: false # This check doesn't require sudo on the control node
  when: inventory_hostname == 'prod_web_server' # Apply this check to your main CrowdSec host (Rathole server)

## CrowdSec Console Enrollment (for engine management)

- name: Check if CrowdSec engine is already enrolled with the Console
  ansible.builtin.command: cscli console status -o json
  register: cscli_console_status
  changed_when: false
  failed_when: false # Don't fail if cscli isn't ready or not enrolled yet
  become: yes

- name: Enroll CrowdSec engine with the Console
  # Pass the enrollment key as a positional argument
  ansible.builtin.command: "cscli console enroll --enable context {{ crowdsec_enrollment_key }}"
  register: console_enroll_output
  changed_when: "'Successfully enrolled with the Console' in console_enroll_output.stdout"
  failed_when: "console_enroll_output.rc != 0 and 'already enrolled' not in console_enroll_output.stderr and 'You are already enrolled' not in console_enroll_output.stdout"
  become: yes
  when:
    - enable_crowdsec | default(true)
    # Ensure the enrollment key variable is defined and not empty
    - crowdsec_enrollment_key is defined and crowdsec_enrollment_key | length > 0
    - cscli_console_status.rc == 0 # Ensure the status command itself ran successfully
    # Parse stdout as JSON and safely get the 'status' key or an empty string
    - (cscli_console_status.stdout | from_json).get('status', '') != 'ENROLLED'

## CrowdSec Bouncer Registration (for local bouncer-to-engine communication)

- name: Check if Caddy bouncer is already registered with CrowdSec Local API
  ansible.builtin.command: cscli bouncers list -o json
  register: cscli_bouncers_list
  changed_when: false
  failed_when: false # Don't fail if cscli isn't ready or no bouncers yet
  become: yes

- name: Register Caddy bouncer with CrowdSec Local API
  ansible.builtin.command: "cscli bouncers add caddy-bouncer -k {{ crowdsec_api_key }}"
  when:
    - enable_crowdsec | default(true) # Only if CrowdSec is enabled
    - "'caddy-bouncer' not in cscli_bouncers_list.stdout" # Only register if not already there
    - cscli_bouncers_list.rc == 0 # Only proceed if the `cscli bouncers list` command itself was successful
  register: bouncer_registration_output
  changed_when: bouncer_registration_output.rc == 0
  failed_when: bouncer_registration_output.rc != 0 and 'already exists' not in bouncer_registration_output.stderr
  become: yes

## Other CrowdSec Configurations (Optional Examples)

# - name: Configure CrowdSec to monitor Caddy logs
#   ansible.builtin.copy:
#     content: |
#       filename: "{{ caddy_log_dir }}/access.log" # Make sure this matches your Caddy log path
#       labels:
#         type: caddy
#     dest: /etc/crowdsec/acquis.d/caddy_logs.yaml
#     owner: root
#     group: root
#     mode: '0644'
#   become: yes
#   notify: restart crowdsec