# roles/crowdsec/tasks/main.yml

# --- CrowdSec Role: Installation and Configuration ---

- name: Validate required variables
  ansible.builtin.assert:
    that:
      - crowdsec_lapi_ip | default('') != ''
      - crowdsec_lapi_port | default('') != ''
    fail_msg: "Required CrowdSec variables (LAPI ip/port) are missing or empty."
  when: enable_crowdsec | default(true)

## Repository and Package Installation

- name: Ensure curl is installed
  ansible.builtin.apt:
    name: curl
    state: present
    update_cache: true

- name: Download CrowdSec APT install script
  ansible.builtin.get_url:
    url: https://install.crowdsec.net
    dest: /tmp/install_crowdsec.sh
    mode: "0755"

- name: Add CrowdSec APT repository via script
  ansible.builtin.shell: set -o pipefail && /bin/bash /tmp/install_crowdsec.sh
  args:
    executable: /bin/bash
    creates: /etc/apt/sources.list.d/crowdsec_crowdsec.list

- name: Ensure CrowdSec data directory exists
  ansible.builtin.file:
    path: /var/lib/crowdsec
    state: directory
    owner: root
    group: root
    mode: "0755"

- name: Install CrowdSec agent and iptables bouncer
  ansible.builtin.apt:
    name:
      - crowdsec
      - crowdsec-firewall-bouncer-iptables
    state: present
  notify: Restart Crowdsec Service

## Post-Installation and Service Management

- name: Ensure CrowdSec service is enabled and started
  ansible.builtin.systemd:
    name: crowdsec
    state: started
    enabled: true
    daemon_reload: true

# TODO:
# - name: Wait for CrowdSec Local API to be ready
#   ansible.builtin.wait_for:
#     port: "{{ crowdsec_lapi_port }}"
#     host: "{{ crowdsec_lapi_ip }}"
#     timeout: 60
#     delay: 5
#   delegate_to: localhost
#   become: false

## CrowdSec Hub Content Installation

- name: Update CrowdSec Hub
  ansible.builtin.command: cscli hub update
  register: crowdsec_cscli_hub_update_output
  changed_when: "'Nothing to do' not in crowdsec_cscli_hub_update_output.stdout"
  failed_when: crowdsec_cscli_hub_update_output.rc != 0

# Includes base-http-scenarios collection, caddy-logs parser
- name: Install CrowdSecurity Caddy collection
  ansible.builtin.command: cscli collections install crowdsecurity/caddy
  register: crowdsec_cscli_caddy_collection_output
  changed_when: "'Successfully installed' in crowdsec_cscli_caddy_collection_output.stdout or 'Upgraded' in crowdsec_cscli_caddy_collection_output.stdout"
  failed_when: "(crowdsec_cscli_caddy_collection_output.rc != 0 and 'already installed' not in crowdsec_cscli_caddy_collection_output.stderr and 'already enabled' not in crowdsec_cscli_caddy_collection_output.stdout)"
  when: "'crowdsecurity/caddy' not in (crowdsec_cscli_hub_update_output.stdout | default(''))"

## CrowdSec AppSec Setup

- name: Install CrowdSec AppSec virtual patching collection
  ansible.builtin.command: cscli collections install crowdsecurity/appsec-virtual-patching
  register: crowdsec_cscli_appsec_virtual_patching_output
  changed_when: "'Successfully installed' in crowdsec_cscli_appsec_virtual_patching_output.stdout or 'Upgraded' in crowdsec_cscli_appsec_virtual_patching_output.stdout"
  failed_when: "(crowdsec_cscli_appsec_virtual_patching_output.rc != 0 and 'already installed' not in crowdsec_cscli_appsec_virtual_patching_output.stderr and 'already enabled' not in crowdsec_cscli_appsec_virtual_patching_output.stdout)"
  when: "'crowdsecurity/appsec-virtual-patching' not in (crowdsec_cscli_hub_update_output.stdout | default(''))"

- name: Install CrowdSec AppSec generic rules collection
  ansible.builtin.command: cscli collections install crowdsecurity/appsec-generic-rules
  register: crowdsec_cscli_appsec_generic_rules_output
  changed_when: "'Successfully installed' in crowdsec_cscli_appsec_generic_rules_output.stdout or 'Upgraded' in crowdsec_cscli_appsec_generic_rules_output.stdout"
  failed_when: "(crowdsec_cscli_appsec_generic_rules_output.rc != 0 and 'already installed' not in crowdsec_cscli_appsec_generic_rules_output.stderr and 'already enabled' not in crowdsec_cscli_appsec_generic_rules_output.stdout)"
  when: "'crowdsecurity/appsec-generic-rules' not in (crowdsec_cscli_hub_update_output.stdout | default(''))"

- name: Install CrowdSec AppSec HTTP CVE collection
  ansible.builtin.command: cscli collections install crowdsecurity/http-cve
  register: crowdsec_cscli_appsec_http_cve_output
  changed_when: "'Successfully installed' in crowdsec_cscli_appsec_http_cve_output.stdout or 'Upgraded' in crowdsec_cscli_appsec_http_cve_output.stdout"
  failed_when: "(crowdsec_cscli_appsec_http_cve_output.rc != 0 and 'already installed' not in crowdsec_cscli_appsec_http_cve_output.stderr and 'already enabled' not in crowdsec_cscli_appsec_http_cve_output.stdout)"
  when: "'crowdsecurity/http-cve' not in (crowdsec_cscli_hub_update_output.stdout | default(''))"

- name: Configure CrowdSec to listen for AppSec requests
  ansible.builtin.template:
    src: appsec.yaml.j2
    dest: /etc/crowdsec/acquis.d/appsec.yaml
    owner: root
    group: root
    mode: "0644"
  notify: Restart Crowdsec Service

## CrowdSec Console and Bouncer Management

- name: Check CrowdSec Console enrollment status
  ansible.builtin.command: cscli console status -o json
  register: crowdsec_cscli_console_status
  changed_when: false
  failed_when: false

- name: Enroll CrowdSec engine with the Console
  ansible.builtin.command: "cscli console enroll --enable context {{ crowdsec_enrollment_key }}"
  register: crowdsec_console_enroll_output
  changed_when: "'Successfully enrolled with the Console' in crowdsec_console_enroll_output.stdout"
  failed_when: "crowdsec_console_enroll_output.rc != 0 and 'already enrolled' not in crowdsec_console_enroll_output.stderr and 'You are already enrolled' not in crowdsec_console_enroll_output.stdout"
  when:
    - enable_crowdsec | default(true)
    - crowdsec_enable_console_enroll | default(false)
    - crowdsec_enrollment_key is defined and (crowdsec_enrollment_key | length > 0)
    - crowdsec_cscli_console_status.rc == 0
    - (crowdsec_cscli_console_status.stdout | from_json).get('status', '') != 'ENROLLED'

- name: Check if Caddy bouncer is already registered
  ansible.builtin.command: cscli bouncers list -o json
  register: crowdsec_cscli_bouncers_list
  changed_when: false
  failed_when: false

- name: Register Caddy bouncer with CrowdSec Local API
  ansible.builtin.command: "cscli bouncers add caddy-bouncer -k {{ crowdsec_api_key }}"
  when:
    - enable_crowdsec | default(true)
    - "'caddy-bouncer' not in crowdsec_cscli_bouncers_list.stdout"
    - crowdsec_cscli_bouncers_list.rc == 0
  register: crowdsec_bouncer_registration_output
  changed_when: crowdsec_bouncer_registration_output.rc == 0
  failed_when: crowdsec_bouncer_registration_output.rc != 0 and 'already exists' not in crowdsec_bouncer_registration_output.stderr

- name: Configure CrowdSec to monitor Caddy access logs
  ansible.builtin.copy:
    content: |
      # Use 'filenames' (plural) to specify multiple files or a glob pattern
      filenames:
        - "{{ (caddy_log_dir | default('/var/log/caddy')) }}/*.access.log"
      labels:
        type: caddy
    dest: /etc/crowdsec/acquis.d/caddy_logs.yaml
    owner: root
    group: root
    mode: "0644"
  notify: Restart Crowdsec Service

## CrowdSec Ntfy and Profile Configuration

- name: Ensure CrowdSec notifications directory exists (if Ntfy enabled)
  ansible.builtin.file:
    path: /etc/crowdsec/notifications/
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: ntfy_enabled

- name: Create Ntfy notification configuration file
  ansible.builtin.template:
    src: "templates/ntfy.yaml.j2"
    dest: /etc/crowdsec/notifications/ntfy.yaml
    owner: root
    group: root
    mode: "0644"
  notify: Restart Crowdsec Service
  when: ntfy_enabled

- name: Install GeoIP enrichment parser (if Ntfy enabled)
  ansible.builtin.command:
    cmd: cscli parsers install crowdsecurity/geoip-enrich
  register: crowdsec_geoip_install_output
  changed_when: "'Successfully installed' in crowdsec_geoip_install_output.stdout or 'Upgraded' in crowdsec_geoip_install_output.stdout"
  failed_when: "(crowdsec_geoip_install_output.rc != 0 and 'already installed' not in crowdsec_geoip_install_output.stderr and 'already enabled' not in crowdsec_geoip_install_output.stdout)"
  notify: Restart Crowdsec Service
  when:
    - ntfy_enabled
    - "'crowdsecurity/geoip-enrich' not in (crowdsec_cscli_hub_update_output.stdout | default(''))"

- name: Create/update CrowdSec profiles.yaml for Ntfy or dynamic blocking
  ansible.builtin.template:
    src: "templates/profiles.yaml.j2"
    dest: /etc/crowdsec/profiles.yaml
    owner: root
    group: root
    mode: "0644"
  notify: Restart Crowdsec Service
  when: ntfy_enabled or duration_expr

  ## CrowdSec Whitelist Configuration

- name: Ensure CrowdSec postoverflow whitelist directory exists
  ansible.builtin.file:
    path: /etc/crowdsec/postoverflows/s01-whitelist
    state: directory
    owner: root
    group: root
    mode: "0755"
  when: dynamic_whitelist_enabled

- name: Add dynamic IPs to CrowdSec postoverflow whitelist
  ansible.builtin.template:
    src: 01-my-dynamic-whitelist.yaml.j2 # This template will now handle multiple hostnames
    dest: /etc/crowdsec/postoverflows/s01-whitelist/01-my-dynamic-whitelist.yaml
    owner: root
    group: root
    mode: "0644"
  notify: Restart Crowdsec Service
  when: dynamic_whitelist_enabled

- name: Clean up temporary CrowdSec files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "/tmp/crowdsec_install_script.sh"
    - "/tmp/crowdsec_temp"
